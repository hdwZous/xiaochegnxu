{"version":3,"sources":["index.weapp.js","util.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["//@ts-ignore\nvar __TEMP__ = require('@legos/js-security-jdxcx');var ParamsSign = __REQUIRE_DEFAULT__(__TEMP__);\nvar __TEMP__ = require('./util');var ColorParams = __TEMP__['ColorParams'];var ColorHeader = __TEMP__['ColorHeader'];\n// 获取ptkey\nlet plugin = requirePlugin(\"loginPlugin\");\nlet pt_key = plugin.getPtKey() || '';\nconst sign = {\n    instance: null,\n    init: () => {\n        sign.instance = null;\n    },\n    genSign: () => {\n        if (sign.instance !== null) {\n            return sign.instance;\n        }\n        sign.instance = new ParamsSign({\n            appId: \"dj_mini\",\n            debug: true,\n            preRequest: false,\n            onSign: ({ code = \"\" }) => {\n                // 0: 成功\n                // 1: 参数错误\n                // 2: 缺少appId\n                // 3: 获取token失败\n                // 4: 签名失败\n                //- 1: 其他错误\n                console.log('onSign', code);\n            },\n            onRequestTokenRemotely: ({ code = \"\", message = \"\" }) => {\n                // 200: 请求成功，表示动态算法接口请求成功，获取到动态token\n                // 其他: 请求失败\n                console.log('onRequestTokenRemotely:', code, message);\n            },\n            onRequestToken: ({ code = \"\", message = \"\" }) => {\n                // 0: 动态token\n                // 1: 本地token\n                console.log('onRequestToken', code, message);\n            }\n        });\n        return sign.instance;\n    },\n};\n// request参数 pt_key传入\nconst api = (options) => {\n    return new Promise(async (resolve, reject) => {\n        // 获取全局变量\n        let app = getApp();\n        let globalData = app.globalData;\n        // 获取地址信息\n        let cityId = '';\n        let lat = '';\n        let lng = '';\n        let addressInfo = wx.getStorageSync('address_info');\n        if (addressInfo && addressInfo.cityId) {\n            cityId = addressInfo.cityId || \"\";\n            lat = addressInfo.latitude || \"\";\n            lng = addressInfo.longitude || \"\";\n        }\n        else {\n            addressInfo = app.globalData.addressInfo || {};\n            if (addressInfo.cityId) {\n                cityId = addressInfo.cityId || \"\";\n                lat = addressInfo.latitude || \"\";\n                lng = addressInfo.longitude || \"\";\n            }\n        }\n        // 登录信息\n        let loginInfo = wx.getStorageSync('login_info') || {};\n        let o2o_m_h5_sid = loginInfo.o2o_m_h5_sid || '';\n        let PDJ_H5_PIN = loginInfo.PDJ_H5_PIN || '';\n        let deviceid_pdj_jd = getUUIDMD5();\n        // 获取真实地址\n        let realTimeLocation = {\n            latitude: '',\n            longitude: ''\n        };\n        try {\n            realTimeLocation = wx.getStorageSync('realTimeLocation');\n        }\n        catch (e) {\n            /**/\n        }\n        // 渠道号\n        let business = globalData.qrcode && globalData.qrcode.business + '' || '';\n        let channelCode = globalData.channelCode || '';\n        //默认参数data字段\n        let data = {\n            channel: globalData.config.channel,\n            platform: 6,\n            platCode: globalData.config.platCode,\n            mpChannel: \"wx_xcx\",\n            appVersion: options.appVersion || globalData.config.platform,\n            xcxVersion: options.xcxVersion || globalData.config.xcxVersion,\n            appName: globalData.config.appName,\n            functionId: options.functionId,\n            body: JSON.stringify(options.body) || \"\",\n            afsImg: options.afsImg || \"\",\n            lat_pos: realTimeLocation.latitude || \"\",\n            lng_pos: realTimeLocation.longitude || \"\",\n            lat: lat,\n            lng: lng,\n            city_id: cityId,\n            deviceToken: getUUIDMD5(),\n            deviceId: getUUIDMD5(),\n            deviceModel: \"appmodel\",\n            business: business,\n            traceId: getrandom() + Date.now(),\n            channelCode: channelCode,\n            pageId: options.pageId || '',\n            appid: \"dj_mini\",\n            t: (new Date()).getTime(),\n            loginType: 12\n        };\n        // 合并参数\n        const colorParams = {\n            ...data, ...options\n        };\n        if (typeof (colorParams.body) != 'string') {\n            // body 字符串化\n            colorParams.body = JSON.stringify(colorParams.body);\n        }\n        // 处理入参字段\n        const params = ColorParams(colorParams);\n        // 开始处理header\n        // cookie\n        let cookieStr = 'cart_uuid=' + getUUIDMD5() + '; pt_key=' + (pt_key || options.pt_key) + '; o2o_m_h5_sid=' + o2o_m_h5_sid + '; deviceid_pdj_jd=' + deviceid_pdj_jd + '; PDJ_H5_PIN=' + PDJ_H5_PIN;\n        let headers = {\n            Cookie: cookieStr,\n            sid: app.globalData.loginStateInfo && app.globalData.loginStateInfo.o2o_m_h5_sid || '',\n            type: 'application/x-www-form-urlencoded'\n        };\n        // 处理header字段\n        let header = ColorHeader(headers);\n        const colorMap = {\n            \"1\": 'api.m.jd.com',\n            \"3\": 'beta-api.m.jd.com',\n            \"2\": 'beta-api2.m.jd.com',\n            \"4\": 'beta-api3.m.jd.com',\n        };\n        const envVersionIndex = wx.getStorageSync('envVersionIndex') || \"1\";\n        //请求url\n        const url = `https://${colorMap[envVersionIndex]}/client.action?appid=${params.appid}&functionId=${options.functionId}`;\n        //请求方法\n        const method = options.method || 'GET'; //https://beta-api.m.jd.com https://test-api.m.jd.com\n        // 删除多余字段\n        delete params.method;\n        delete params.pt_key;\n        console.log('========');\n        console.log('header', header);\n        console.log('params', params);\n        console.log('url', url);\n        console.log('method', method);\n        //需要验签\n        if (options.sign) {\n            //构造加签参数\n            // 前端参数一定要去空处理。null和空字符串都不能参与签名\n            try {\n                const paramsSign = {\n                    functionId: params.functionId,\n                    appid: params.appid,\n                    appVersion: params.clientVersion,\n                    client: params.client,\n                    t: params.t,\n                    body: params.body,\n                };\n                const instance = sign.genSign() || {};\n                //@ts-ignore \n                const signedParams = await instance.sign(paramsSign);\n                params.h5st = encodeURI(signedParams.h5st);\n                // 验签后请求接口\n                wx.request({\n                    url: url,\n                    data: params,\n                    method: method,\n                    header: header,\n                    success: (result) => {\n                        if (result.statusCode == 200) {\n                            const { data } = result;\n                            if (data && data.code == '0') {\n                                resolve(result);\n                            }\n                            else {\n                                // 被color拦截住\n                                if (data.echo) {\n                                    data.msg = data.echo;\n                                    resolve(result);\n                                }\n                                else { // 业务后端返回\n                                    if (data.code == '201' || data.code == '202') { // 未登录拦截\n                                        globalData.loginStateInfo = {};\n                                        try {\n                                            wx.setStorageSync(\"login_info\", {});\n                                        }\n                                        catch (e) {\n                                            console.log(e);\n                                        }\n                                        wx.navigateTo({\n                                            url: `/pages/newLogin/login/login`,\n                                            complete: () => {\n                                                app.globalData.reLogin = false;\n                                            },\n                                            buried_position: \"colorapi\"\n                                        });\n                                    }\n                                    resolve(result);\n                                }\n                            }\n                        }\n                        else {\n                            // 非200\n                            resolve(result);\n                        }\n                    },\n                    fail: (err) => {\n                        reject(err);\n                    }\n                });\n            }\n            catch (error) {\n                console.error(error);\n            }\n        }\n        else {\n            // 不需要验签请求接口\n            wx.request({\n                url: url,\n                data: params,\n                method: method,\n                header: header,\n                success: (result) => {\n                    result.isColor = 1;\n                    if (result.statusCode == 200) {\n                        const { data } = result;\n                        if (data && data.code == '0') {\n                            resolve(result);\n                        }\n                        else {\n                            // 被color拦截住\n                            if (data.echo) {\n                                data.msg = data.echo;\n                                reject(result);\n                            }\n                            else { // 业务后端返回\n                                if (params.isNeedDealError) {\n                                    resolve(result);\n                                }\n                                if (data.code == '201' || data.code == '202') { // 未登录拦截\n                                    globalData.loginStateInfo = {};\n                                    try {\n                                        wx.setStorageSync(\"login_info\", {});\n                                    }\n                                    catch (e) {\n                                        console.log(e);\n                                    }\n                                    wx.navigateTo({\n                                        url: `/pages/newLogin/login/login`,\n                                        complete: () => {\n                                            app.globalData.reLogin = false;\n                                        },\n                                        buried_position: \"colorapi\"\n                                    });\n                                }\n                                reject(result);\n                            }\n                        }\n                    }\n                    else {\n                        // 非200\n                        reject(result);\n                    }\n                },\n                fail: (err) => {\n                    reject({ ...err, isColor: 1 });\n                }\n            });\n        }\n    });\n};\n// 发出请求\n// function wxRequest(url: string, params: any, method: 'GET'|'POST', header: Object) {\n//   return new Promise((resolve, reject) => {\n//     wx.request({\n//       url: url,\n//       data: params,\n//       method: method,\n//       header: header,\n//       success: (result: resultObj<dataObj>) => {\n//         if (result.statusCode == 200) {\n//           const { data } = result;\n//           if (data && data.code == '0') {\n//             resolve(result);\n//           } else {\n//             // 被color拦截住\n//             if (data.echo) {\n//               data.msg = data.echo;\n//               resolve(result);\n//             } else { // 业务后端返回\n//               if (data.code == '201' || data.code == '202') { // 未登录拦截\n//                 globalData.loginStateInfo = {};\n//                 try {\n//                   wx.setStorageSync(\"login_info\", {});\n//                 }\n//                 catch (e) {\n//                   console.log(e);\n//                 }\n//                 wx.navigateTo({\n//                   url: `/pages/newLogin/login/login`,\n//                   complete: () => {\n//                     app.globalData.reLogin = false;\n//                   },\n//                   buried_position: \"colorapi\"\n//                 });\n//               }\n//               resolve(result);\n//             }\n//           }\n//         } else {\n//           // 非200\n//           resolve(result);\n//         }\n//       },\n//       fail: (err) => {\n//         reject(err);\n//       }\n//     });\n//   })\n// }\nfunction getUUIDMD5() {\n    let app = getApp();\n    let uuId = app.globalData.uuId;\n    if (!uuId) {\n        uuId = wx.getStorageSync(\"uuId\");\n    }\n    if (!uuId) {\n        let s = [];\n        let hexDigits = \"0123456789abcdef\";\n        for (var i = 0; i < 36; i++) {\n            s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);\n        }\n        s[14] = \"4\";\n        s[19] = s[19] && hexDigits.substr((0x3) | 0x8, 1);\n        s[8] = s[13] = s[18] = s[23] = \"-\";\n        uuId = s.join(\"\");\n        app.globalData.uuId = uuId;\n        wx.setStorageSync(\"uuId\", uuId);\n    }\n    return uuId;\n}\nfunction getrandom() {\n    let uuId;\n    let s = [];\n    let hexDigits = \"0123456789abcdefghkhijklmn\";\n    for (var i = 0; i < 36; i++) {\n        s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);\n    }\n    s[14] = \"4\";\n    s[19] = s[19] && hexDigits.substr((0x3) | 0x8, 1);\n    s[8] = s[13] = s[18] = s[23] = \"-\";\n    uuId = s.join(\"\");\n    return uuId;\n}\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = api;\n","// 映射color参数\nconst mapping = {\n    // appVersion: 'clientVersion',\n    deviceId: 'uuid',\n    platCode: 'client',\n    platVersion: 'osVersion',\n    channel: 'partner',\n    buildVersion: 'build',\n    brand: 'd_brand',\n    deviceModel: 'd_model'\n};\n// 处理映射color字段\nfunction switchParams(params) {\n    // 组装params\n    const assembleObj = {};\n    for (let key in params) {\n        const _key = key;\n        if (_key in mapping) {\n            assembleObj[mapping[_key]] = params[_key];\n        }\n        else {\n            assembleObj[_key] = params[_key];\n        }\n    }\n    return assembleObj;\n}\n// 处理params 入参\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });function ColorParams(params) {\n    // 处理传入字段\n    let data = switchParams(params);\n    data.source = data.client;\n    data.clientVersion = data.appVersion;\n    return data;\n};exports.ColorParams = ColorParams\n// 处理header\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });function ColorHeader(headers) {\n    //自定义header\n    const header = {\n        'content-type': headers.type,\n        Cookie: headers.Cookie,\n        sid: headers.sid\n    };\n    return header;\n};exports.ColorHeader = ColorHeader\n"]}