{"version":3,"sources":["index.js","utils.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["// 埋点库主入口\nvar __TEMP__ = require('./utils');var utils = __TEMP__['utils'];\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });var DJMtaUtils = exports.DJMtaUtils = {\n    proBasicParams: {},\n    deviceBasicParams: {},\n    epMap: [],\n    epNum: 10,\n    count: 0,\n    dynamicFunc: function () { },\n    customAjax: function () { },\n    isCustomAjax: false,\n    needEncrypt: false,\n    getTime() {\n        let now = new Date();\n        let create_time = `${now.getFullYear()}-${now.getMonth() +\n            1}-${now.getDate()} ${now.getHours()}:${now.getMinutes()}:${now.getSeconds()}.${now.getMilliseconds()}`;\n        return {\n            //补充时间戳\n            clienttime: new Date().getTime(),\n            create_time: create_time\n        };\n    },\n    /**\n     *\n     * @param proBasicParams\n     * @param deviceBasicParams\n     * @param dynamicFunc\n     */\n    init(proBasicParams, deviceBasicParams, dynamicFunc, customAjax) {\n        // 校验项目基本信息传递是否完整\n        utils.verifyProParams(proBasicParams);\n        //校验设备基本信息传递是否完整\n        utils.verifyDevParams(deviceBasicParams);\n        //拿到初始的项目数据，将其保存到全局变量\n        this.proBasicParams = proBasicParams;\n        this.deviceBasicParams = deviceBasicParams;\n        this.needEncrypt = proBasicParams.needEncrypt || false;\n        if (proBasicParams.epAssignNum) {\n            this.epNum = proBasicParams.epAssignNum;\n        }\n        this.dynamicFunc = dynamicFunc;\n        if (customAjax && typeof customAjax == 'function') {\n            this.isCustomAjax = true;\n            this.customAjax = customAjax;\n        }\n    },\n    // 上报PV埋点\n    async sendPvData(firstLevelParams, ext_par, send_type) {\n        //拿到一级参数，与全局参数进行拼接上报\n        let data = Object.assign(firstLevelParams, this.proBasicParams, this.deviceBasicParams, { ext_par: ext_par });\n        let params;\n        if (!!this.dynamicFunc) {\n            params = await this.dynamicFunc();\n        }\n        const method = !!this.isCustomAjax ? this.customAjax : utils.requestApi.bind(utils);\n        method([Object.assign(data, params, this.getTime())], send_type || 'h5', this.needEncrypt);\n    },\n    // 上报点击埋点\n    async sendClickData(firstLevelParams, ext_par, send_type) {\n        if (!!firstLevelParams.click_id) {\n            let data = Object.assign(firstLevelParams, this.proBasicParams, this.deviceBasicParams, { ext_par: ext_par, click_name: firstLevelParams.click_id });\n            let params;\n            if (!!this.dynamicFunc) {\n                params = await this.dynamicFunc();\n            }\n            const method = !!this.isCustomAjax ? this.customAjax : utils.requestApi.bind(utils);\n            method([Object.assign(data, params, this.getTime())], send_type || 'h5', this.needEncrypt);\n        }\n    },\n    //上报实时曝光\n    async sendSingleEpData(firstLevelParams, ext_par) {\n        if (!!firstLevelParams.trace_id && !!firstLevelParams.ep) {\n            let params;\n            if (!!this.dynamicFunc) {\n                params = await this.dynamicFunc();\n            }\n            let data = Object.assign(firstLevelParams, this.proBasicParams, this.deviceBasicParams, { ext_par: ext_par }, params, this.getTime());\n            const method = !!this.isCustomAjax ? this.customAjax : utils.requestApi.bind(utils);\n            method([data], 'show', this.needEncrypt);\n        }\n    },\n    //聚合曝光\n    async sendMultiEpData(firstLevelParams, ext_par) {\n        if (!!firstLevelParams.trace_id && !!firstLevelParams.ep) {\n            // 这里得有个逻辑在。聚合的逻辑\n            const { trace_id, ep, cur_page } = firstLevelParams;\n            const { pageId } = ext_par;\n            //聚合一下其他的参数\n            let params;\n            if (!!this.dynamicFunc) {\n                params = await this.dynamicFunc();\n            }\n            let extraData = Object.assign(firstLevelParams, this.proBasicParams, this.deviceBasicParams, { ext_par: ext_par }, params, this.getTime());\n            let traceObj = this.epMap.find((value) => value.traceId == trace_id);\n            if (traceObj) {\n                const epList = traceObj === null || traceObj === void 0 ? void 0 : traceObj.ep;\n                // 拿到traceObj的索引，用于从epMap中删除使用\n                const startIndex = this.epMap.findIndex((item) => item.traceId == trace_id);\n                // 如果有Useraction\n                const curUserAction = epList.find((value) => value.spmId == ep);\n                if (curUserAction) {\n                    this.epMap[startIndex].ep.map((v) => {\n                        if (v.spmId == ep) {\n                            v.cnt++;\n                        }\n                    });\n                }\n                else {\n                    this.epMap[startIndex].ep.push({ spmId: ep, cnt: 1 });\n                    let uploadData = JSON.parse(JSON.stringify(this.epMap));\n                    // epList.push({ spmId: userAction, cnt: 1 });\n                    // 同一个traceid下的ep超过阈值，上报\n                    //组合traceid进行上报；总共10条就上报\n                    this.count++;\n                    if (this.count >= this.epNum) {\n                        //先删除epMap中对应的uploadData中的内容,,,,,这里怎么能把这些去除呢\n                        uploadData.forEach((item) => {\n                            var _a, _b;\n                            //如果这个时候this.epMap发生变化了呢 怎么办？应该只删除对应的traceId下的10条\n                            let delIndex = this.epMap.findIndex((item1) => item1.traceId == item.traceId);\n                            let getEp = (_b = (_a = this === null || this === void 0 ? void 0 : this.epMap) === null || _a === void 0 ? void 0 : _a[delIndex]) === null || _b === void 0 ? void 0 : _b.ep;\n                            // this.epMap.splice(delIndex, 1);\n                            if ((getEp === null || getEp === void 0 ? void 0 : getEp.length) == this.epNum) {\n                                this.epMap.splice(delIndex, 1);\n                            }\n                            else {\n                                getEp === null || getEp === void 0 ? void 0 : getEp.splice(0, this.epNum - 1);\n                            }\n                        });\n                        this.count = 0;\n                        let joinData = [];\n                        uploadData.forEach((epItem) => {\n                            if (!epItem.traceId || (!epItem.ep || (!!epItem.ep && epItem.ep.length == 0)))\n                                return true;\n                            let newItem = JSON.parse(JSON.stringify(Object.assign(extraData, epItem)));\n                            joinData.push(newItem);\n                            return true;\n                            // console.log('满足10：', epItem, extraData);\n                        });\n                        const method = !!this.isCustomAjax ? this.customAjax : utils.requestApi.bind(utils);\n                        method(joinData, 'show', this.needEncrypt);\n                        // //上报\n                        // this.hasTime = false;\n                        // DJMta.sendEpData({ epData: uploadData, cur_page: pageName, clientTime: this.clientTime });\n                        uploadData = {};\n                    }\n                }\n            }\n            else {\n                this.count++;\n                //插入一条新的traceid\n                this.epMap.push({\n                    traceId: trace_id,\n                    ep: [{ spmId: ep, cnt: 1 }],\n                    cur_page: cur_page,\n                    pageId: pageId\n                });\n                let uploadData = JSON.parse(JSON.stringify(this.epMap));\n                if (this.count >= this.epNum) {\n                    //先删除epMap中对应的uploadData中的内容,,,,,这里怎么能把这些去除呢\n                    uploadData.forEach((item) => {\n                        var _a, _b;\n                        let delIndex = this.epMap.findIndex((item1) => item1.traceId == item.traceId);\n                        // this.epMap.splice(delIndex, 1);\n                        let getEp = (_b = (_a = this === null || this === void 0 ? void 0 : this.epMap) === null || _a === void 0 ? void 0 : _a[delIndex]) === null || _b === void 0 ? void 0 : _b.ep;\n                        if ((getEp === null || getEp === void 0 ? void 0 : getEp.length) == this.epNum) {\n                            this.epMap.splice(delIndex, 1);\n                        }\n                        else {\n                            getEp === null || getEp === void 0 ? void 0 : getEp.splice(0, this.epNum - 1);\n                        }\n                    });\n                    this.count = 0;\n                    let joinData = [];\n                    uploadData.forEach((epItem) => {\n                        if (!epItem.traceId || (!epItem.ep || (!!epItem.ep && epItem.ep.length == 0)))\n                            return true;\n                        let newItem = JSON.parse(JSON.stringify(Object.assign(extraData, epItem)));\n                        joinData.push(newItem);\n                        return true;\n                        // console.log('满足10：', epItem, extraData);\n                    });\n                    const method = !!this.isCustomAjax ? this.customAjax : utils.requestApi.bind(utils);\n                    method(joinData, 'show', this.needEncrypt);\n                    // //上报\n                    // DJMta.sendEpData({ epData: uploadData, cur_page: pageName, clientTime: this.clientTime });\n                    uploadData = {};\n                }\n            }\n        }\n    },\n    // 上报曝光池中，所有的曝光埋点\n    async sendAllEpData(firstLevelParams, ext_par) {\n        if (this.epMap.length > 0) {\n            let joinData = [];\n            let uploadData = JSON.parse(JSON.stringify(this.epMap));\n            let params;\n            if (!!this.dynamicFunc) {\n                params = await this.dynamicFunc();\n            }\n            let extraData = Object.assign(firstLevelParams, this.proBasicParams, this.deviceBasicParams, { ext_par: ext_par }, params, this.getTime());\n            uploadData.forEach((epItem) => {\n                if (!epItem.traceId || (!epItem.ep || (!!epItem.ep && epItem.ep.length == 0)))\n                    return true;\n                let newItem = JSON.parse(JSON.stringify(Object.assign(extraData, epItem)));\n                if (newItem && newItem.pageId) {\n                    newItem.ext_par.pageId = newItem.pageId;\n                    delete newItem.pageId;\n                }\n                joinData.push(newItem);\n                return true;\n            });\n            const method = !!this.isCustomAjax ? this.customAjax : utils.requestApi.bind(utils);\n            method(joinData, 'show', this.needEncrypt);\n            this.epMap = [];\n            // 清除上一页的count\n            this.count = 0;\n        }\n    },\n    // 自定义埋点上报\n    sendCustomData(firstLevelParams, ext_par, send_type) {\n        const method = !!this.isCustomAjax ? this.customAjax : utils.requestApi.bind(utils);\n        method(Object.assign(firstLevelParams, { ext_par: ext_par }), send_type, this.needEncrypt);\n    },\n    // 动态更新数据\n    updateEncryptStatus(needEncrypt) {\n        this.needEncrypt = needEncrypt;\n    }\n};\n","\nvar __TEMP__ = require('crypto-js/core');var CryptoJSCore = __REQUIRE_DEFAULT__(__TEMP__);\nvar __TEMP__ = require('crypto-js/aes');var AES = __REQUIRE_DEFAULT__(__TEMP__);\nvar __TEMP__ = require('crypto-js/pad-pkcs7');var Pkcs7 = __REQUIRE_DEFAULT__(__TEMP__);\nconst S_KEY = \"J@NcRfUjXn2r5u8x\";\nconst S_PARAMETER = \"t7w!z%C*F-JaNdRg\";\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });var utils = exports.utils = {\n    fetchUrl: 'https://log-o2o.jd.com/v1/logging',\n    searchParams(params) {\n        return Object.keys(params)\n            .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`)\n            .join('&')\n            .replace(/%20/g, '+');\n    },\n    // 验证项目基本信息\n    verifyProParams(proBasicParams) {\n        if (!('app_version' in proBasicParams)) {\n            console.log('未定义版本号 - app_version！');\n            return false;\n        }\n        if (!('app_name' in proBasicParams)) {\n            console.log('未定义项目名称 - app_name！');\n            return false;\n        }\n        if (!('plat_code' in proBasicParams)) {\n            console.log('未定义平台类型 - plat_code');\n            return false;\n        }\n        // if(!('channel_name' in proBasicParams)){\n        //     console.log('未传入渠道名称 - channel_name');\n        //     return false;\n        // }\n        return true;\n    },\n    // 验证设备的基本信息\n    verifyDevParams(deviceBasicParams) {\n        if (!('os' in deviceBasicParams)) {\n            console.log('未定义操作系统 - os');\n            return false;\n        }\n        if (!('device_id' in deviceBasicParams)) {\n            console.log('未定义设备id - device_id');\n            return false;\n        }\n        return true;\n    },\n    // 上报埋点\n    requestApi(data, type, needEncrypt) {\n        return new Promise((resolve, reject) => {\n            if (data.length == 0) {\n                reject();\n            }\n            const plainData = {\n                logType: type || 'h5',\n                json: JSON.stringify(data)\n            };\n            const encryptData = {\n                logType: type || 'h5',\n                json: encodeURIComponent(this.encrypt(JSON.stringify(data))),\n                jef: 1\n            };\n            const body = !!needEncrypt ? encryptData : plainData;\n            fetch(this.fetchUrl, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n                },\n                body: this.searchParams(body)\n            })\n                .then(response => {\n                if (response === null || response === void 0 ? void 0 : response.ok) {\n                    response.json().then(json => {\n                        resolve(json);\n                    });\n                }\n                else {\n                    reject();\n                }\n            })\n                .catch(() => {\n                reject();\n            });\n        });\n    },\n    /**\n * api 加密\n */\n    encrypt(data) {\n        const CBCOptions = {\n            iv: CryptoJSCore.enc.Utf8.parse(S_PARAMETER),\n            mode: CryptoJSCore.mode.CBC,\n            padding: Pkcs7\n        };\n        const key = CryptoJSCore.enc.Utf8.parse(S_KEY);\n        const secretData = CryptoJSCore.enc.Utf8.parse(data);\n        const encrypted = AES.encrypt(secretData, key, CBCOptions);\n        return encrypted.toString();\n    }\n};\n"]}